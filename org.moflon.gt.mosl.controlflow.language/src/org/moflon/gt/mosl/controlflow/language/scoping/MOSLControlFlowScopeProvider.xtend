/*
 * generated by Xtext 2.11.0
 */
package org.moflon.gt.mosl.controlflow.language.scoping

import org.eclipse.emf.ecore.EPackage
import org.apache.log4j.Logger
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EClassifier
import org.moflon.gt.mosl.controlflow.language.moslControlFlow.CalledPatternParameter
import org.moflon.gt.mosl.controlflow.language.moslControlFlow.MethodDec
import org.moflon.core.utilities.eMoflonEMFUtil
import org.moflon.gt.mosl.controlflow.language.moslControlFlow.GraphTransformationControlFlowFile
import org.eclipse.emf.common.util.URI
import org.moflon.gt.mosl.controlflow.language.moslControlFlow.EClassDef
import org.moflon.gt.mosl.controlflow.language.moslControlFlow.ObjectVariableStatement
import java.util.HashMap
import java.util.List
import org.moflon.gt.mosl.controlflow.language.moslControlFlow.PatternReference
import org.moflon.gt.mosl.controlflow.language.utils.MOSLGTControlFlowUtil
import org.eclipse.emf.ecore.EParameter
import org.moflon.core.xtext.exceptions.CannotFindScopeException
import org.moflon.core.xtext.scoping.ScopeProviderHelper
import org.moflon.core.xtext.scoping.utils.MOSLScopeUtil
import org.emoflon.ibex.gt.editor.gT.EditorGTFile
import org.eclipse.xtext.scoping.IScope
import org.moflon.gt.mosl.controlflow.language.moslControlFlow.PatternStatement
import org.eclipse.xtext.scoping.Scopes
import java.util.ArrayList

/**
 * This class contains custom scoping description.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MOSLControlFlowScopeProvider extends AbstractMOSLControlFlowScopeProvider {
	private static ScopeProviderHelper<EPackage> scopeEPackageHelper = new ScopeProviderHelper()
	private var resolvingCache = new HashMap<GraphTransformationControlFlowFile, List<EditorGTFile>>();

	private Logger log = Logger.getLogger(MOSLControlFlowScopeProvider.getClass());

	override getScope(EObject context, EReference reference) {
		MOSLGTControlFlowUtil.instance.resolvePatterns(context, resolvingCache, scopeEPackageHelper.resourceSet)
		try{
			if(searchForEClass(context,reference)){
				return getScopeByType(context, EClass)
			}
			else if(searchForEClassifier(context,reference)){
				return getScopeByType(context, EClassifier)
			}
			else if(searchForPattern(context))
				return MOSLGTControlFlowUtil.instance.getScopeByPattern(context,reference, resolvingCache)
			else if(searchForPatternParameter(context,reference))
				return getScopeByPatternParameter(context,reference,resolvingCache)
		}catch (CannotFindScopeException e){
			log.error("Cannot find Scope",e)
		}
		super.getScope(context, reference);
	}
	
	def boolean searchForPatternParameter(EObject context, EReference reference) {
		return context instanceof PatternStatement && reference.name.equals("parameter");
	}
	
	def IScope getScopeByPatternParameter(EObject context, EReference reference, HashMap<GraphTransformationControlFlowFile, List<EditorGTFile>> resolvingCache) {
		val patternStmt = context as PatternStatement
		val patternRef = patternStmt.patternReference
		val pattern = patternRef.pattern
		val patternList= new ArrayList()
		patternList.add(pattern)
		return Scopes.scopeFor(pattern.nodes,Scopes.scopeFor(patternList))
		}

	static def getScopeProviderHelper(){
		scopeEPackageHelper
	}

	def boolean searchForCalledPatternParameter(EObject context, EReference reference) {
		return context instanceof CalledPatternParameter;
	}


	def boolean searchForPattern(EObject context) {
		return context instanceof PatternReference
	}

	def getScopeByType(EObject context, Class<? extends EObject> type)throws CannotFindScopeException{
		val set = scopeEPackageHelper.resourceSet
		eMoflonEMFUtil.createPluginToResourceMapping(set);
		var gtf = MOSLScopeUtil.instance.getRootObject(context, GraphTransformationControlFlowFile)//getGraphTransformationControlFlowFile(context)
		var uris = gtf.imports.map[importValue | URI.createURI(importValue.name)];
		return scopeEPackageHelper.createScope(uris, EPackage, type);
	}

	def boolean searchForEClass(EObject context, EReference reference){
		return context instanceof EClassDef
	}

	def boolean searchForEClassifier(EObject context, EReference reference){
		return context instanceof MethodDec ||  context instanceof ObjectVariableStatement
		|| (context instanceof EParameter && reference.name.equals("eType"))
	}
}
