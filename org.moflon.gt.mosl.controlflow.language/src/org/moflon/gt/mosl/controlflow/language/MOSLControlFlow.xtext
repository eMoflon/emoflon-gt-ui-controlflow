grammar org.moflon.gt.mosl.controlflow.language.MOSLControlFlow with org.eclipse.xtext.common.Terminals

generate moslControlFlow "http://www.moflon.org/gt/mosl/controlflow/language/MOSLControlFlow"
import "http://www.emoflon.org/ibex/gt/editor/GT" as ibexPattern
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

GraphTransformationControlFlowFile:
	imports += Import*
	includedPatterns += IncludePattern*
	'package' name = QualifiedName
	eClasses += EClassDef*
;

// EMF Connections
EPackage returns ecore::EPackage: GraphTransformationControlFlowFile ;

ETypedElement returns ecore::ETypedElement:ObjectVariableStatement;


EOperation returns ecore::EOperation:MethodDec;

EParameter returns ecore::EParameter:MethodParameter;

EClassDef:
	'class' name = [ecore::EClass | QualifiedName] '{'
	operations += MethodDec*
	'}'
;

MethodDec:
	'operation' name = ID '(' (eParameters+=MethodParameter)? (',' eParameters+=MethodParameter)* ')' ':' (eType=[ecore::EClassifier | QualifiedName] | 'void') ('{'
		startStatement = Statement?
	'}')?
;
//
//CalledPatternParameter:object=[TypedElement | QualifiedName] | create= ObjectVariableStatement;
//CalledPatternParameter: (parameter = [ibexPattern::EditorNode]) |(parameter = [ibexPattern::EditorParameter]) '=' object=[TypedElement | QualifiedName] | create= ObjectVariableStatement;
CalledPatternParameter: parameter = [ibexPattern::EditorNode | QualifiedName] '=' object=[TypedElement | QualifiedName] | create= ObjectVariableStatement;

ObjectVariableStatement:(op = Operator)? name = ID ':' eType = [ecore::EClass | QualifiedName] (':=' assignment=[ObjectVariableStatement | QualifiedName])?;

Statement: NextStatement | ReturnStatement;

NextStatement:(PatternStatement | ConditionContainingStatement| ObjectVariableStatement| CallStatement ) (next = Statement)?;

PatternStatement:'invoke' patternReference=PatternReference '('(parameters+=CalledPatternParameter)? (',' parameters+=CalledPatternParameter)*')';

ConditionStatement:'if' '(' cond=Condition ')''{'
	thenStartStatement = Statement
	'}'
	('else' '{'
		elseStartStatement = Statement
	'}')?
;

CallStatement:OperationCallStatement | MethodCallStatement;

MethodCallStatement:name = [MethodDec] '('(parameters+=CalledMethodParameter (',' parameters+=CalledMethodParameter)*)?')';

OperationCallStatement:
	object=[TypedElement] '.' call = [ecore::EOperation] '(' (parameters+=CalledMethodParameter (',' parameters+=CalledMethodParameter)*)? ')'
;

CalledMethodParameter:(object=[TypedElement | QualifiedName]) | create= ObjectVariableStatement;

Condition:patternReference=PatternReference '('(parameters+=CalledPatternParameter)? (',' parameters+=CalledPatternParameter)*')';

PatternReference: pattern = [ibexPattern::EditorPattern];

ConditionContainingStatement:ConditionStatement | LoopStatement;

LoopStatement:DoLoopStatement | WhileLoopStatement| ForLoopStatement;

WhileLoopStatement: 'while''(' cond=Condition ')''{'
		loopStartStatement = Statement
	'}'
;

DoLoopStatement: 'do' '{'
	loopStartStatement = Statement
	'}' 'while' '(' cond=Condition ')'
;

ForLoopStatement: 'for' '('
	cond = Condition
	')''{'
		loopStartStatement = Statement
	'}'
;

ReturnStatement:{ReturnStatement} 'return' (returnObject=[ObjectVariableStatement])?;

MethodParameter: name = ID ':' eType=[ecore::EClassifier | QualifiedName];

MethodTypeName returns ecore::EString: 'void' | QualifiedName;

Operator:
	value = OPERATOR_VALUE
;


/* ---------------- */
/*    Auxiliaries   */
/* ---------------- */

IncludePattern: 'using' importURI=STRING;

Import:
	'import' name = STRING
;

Using:
	'using' importedNamespace = QualifiedNameWithWildcard
;

terminal OPERATOR_VALUE: '++'| '!' | '--';

terminal DECIMAL: INT '.' INT;

LiteralValue:
	(STRING | ('-')?INT | ('-')?DECIMAL | BOOL)
;

terminal BOOL:
	'true' | 'false'
;

QualifiedNameWithWildcard:
	QualifiedName '.*'
;

QualifiedName returns ecore::EString:
	ID ('.' ID)*
;

//additional connections
TypedElement:(ObjectVariableStatement | MethodParameter);

CalledParameter:CalledPatternParameter | CalledMethodParameter;

