/*
 * generated by Xtext 2.12.0
 */
package org.moflon.gt.mosl.controlflow.language.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.moflon.gt.mosl.controlflow.language.moslControlFlow.EClassDef
import org.moflon.gt.mosl.controlflow.language.moslControlFlow.GraphTransformationControlFlowFile
import org.moflon.gt.mosl.controlflow.language.moslControlFlow.Import
import org.moflon.gt.mosl.controlflow.language.moslControlFlow.IncludePattern
import org.moflon.gt.mosl.controlflow.language.moslControlFlow.MethodDec
import org.moflon.gt.mosl.controlflow.language.services.MOSLControlFlowGrammarAccess
import org.moflon.gt.mosl.controlflow.language.moslControlFlow.Statement
import org.moflon.gt.mosl.controlflow.language.moslControlFlow.NextStatement
import org.moflon.gt.mosl.controlflow.language.moslControlFlow.LoopStatement
import org.moflon.gt.mosl.controlflow.language.moslControlFlow.ConditionContainingStatement
import org.moflon.gt.mosl.controlflow.language.moslControlFlow.ConditionStatement

class MOSLControlFlowFormatter extends AbstractFormatter2 {
	
	@Inject extension MOSLControlFlowGrammarAccess
	
	private static final String BRACE_LEFT = "{"
	private static final String BRACE_RIGHT = "}"
	private static final String COMMA = ","
	
	def dispatch void format(GraphTransformationControlFlowFile gtcff, extension IFormattableDocument document) {
		gtcff.imports.forEach[cfImport | cfImport.append[newLine]]
		gtcff.includedPatterns.forEach[include| include.append[newLine]]
		gtcff.EClasses.forEach[eclass | eclass.format(document)]
	}
	
	def dispatch void format(EClassDef eclassDef, extension IFormattableDocument document) {
		eclassDef.regionFor.keyword(BRACE_LEFT).append[newLine].append[indent]
		eclassDef.operations.forEach[method | method.format(document)]
		eclassDef.regionFor.keyword(BRACE_RIGHT).prepend[newLine].append[newLine]
	}
	
	def dispatch void format(MethodDec method, extension IFormattableDocument document){
		method.EParameters.forEach[param | param.regionFor.keyword(COMMA).append[oneSpace]]
		method.regionFor.keyword(BRACE_LEFT).append[newLine].append[indent]
		method.startStatement.format(document)
		method.regionFor.keyword(BRACE_RIGHT).append[newLine]
	}
	
	def dispatch void format(Statement statement, extension IFormattableDocument document){
		statement.append[newLine]
		if(statement instanceof NextStatement){
			statement.next.format(document)
		}
		if(statement instanceof ConditionContainingStatement){
			statement.formatStatement(document)
		}
	}
	
	def dispatch void formatStatement(LoopStatement loopStatement, extension IFormattableDocument document){
		loopStatement.regionFor.keyword(BRACE_LEFT).append[newLine].append[indent]
		loopStatement.loopStartStatement.format(document)
		loopStatement.regionFor.keyword(BRACE_RIGHT).append[newLine]
	}
	
	def dispatch void formatStatement(ConditionStatement stmnt, extension IFormattableDocument document){
		stmnt.regionFor.keyword(BRACE_LEFT).append[newLine].append[indent]
		stmnt.thenStartStatement.format(document)
		stmnt.regionFor.keyword(BRACE_RIGHT).append[newLine]
		
		stmnt.regionFor.keyword(BRACE_LEFT).append[newLine].append[indent]
		stmnt.elseStartStatement.format(document)
		stmnt.regionFor.keyword(BRACE_RIGHT).append[newLine]
	}
	
	// TODO: implement for MethodDec, CalledPatternParameter, ObjectVariableStatement, NextStatement, PatternStatement, ConditionStatement, MethodCallStatement, OperationCallStatement, CalledMethodParameter, Condition, WhileLoopStatement, DoLoopStatement, ForLoopStatement
}
